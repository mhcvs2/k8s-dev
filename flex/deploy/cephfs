#!/bin/bash

DEBUG=${CEPHFSDEBUG:-0}
[[ -f /.cephfsdebug ]] && DEBUG=1

d_log='/var/log/flex-volume/cephfs'
if [[ ! -d "${d_log}" ]]; then
	mkdir -p "${d_log}"
	chmod o= "${d_log}"
fi

debug() {
	(( DEBUG )) && echo "$*" >> "${d_log}/debug.log"
#	echo -ne $* >&1
}

# Notes:
#  - Please install "jq" package before using this driver.
usage() {
	err "Invalid usage. Usage: "
	err "\t$0 init"
	err "\t$0 mount <mount dir> <json params>"
	err "\t$0 unmount <mount dir>"
	exit 1
}

err() {
    (( DEBUG )) && echo "${date}:ERROR: $*" >> "${d_log}/debug.log"
	echo -ne $* 1>&2
}

log() {
    (( DEBUG )) && echo "${date}:OUTPUT: $*" >> "${d_log}/debug.log"
	echo -ne $* >&1
}

ismounted() {
	MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1`
	if [ "${MOUNT}" == "${MNTPATH}" ]; then
		echo "1"
	else
		echo "0"
	fi
}

domount() {
	MNTPATH=$1
    debug "domount"
    debug "$1"
    debug "$2"
	MDS=$(echo $2 | jq -r '.mds')
	MONITOR=$(echo $2 | jq -r '.monitors')
	SHARE=$(echo $2 | jq -r '.share')
	if [[ "$SHARE"x == "null"x ]]
	then
		SHARE=/${MNTPATH##*/}
	fi
	AUTH_ID=$(echo $2 | jq -r '.authid')
	KEYRING=$(echo $2 | jq -r '.["kubernetes.io/secret/keyring"]')

	# If value of keyring  is null it means secret not present. Try to parse it
	# from an option instead of a secret
	if [[ ${KEYRING} == 'null' ]]; then
		KEYRING=$(echo $2 | jq -r '.keyring')
	fi

	# If keyring is still null, it means there is no keyring. Abort
	if [[ ${KEYRING} == 'null' ]]; then
		err "{ \"status\": \"Failure\", \"message\": \"Failed to mount CephFS share ${SHARE} at ${MNTPATH} due to no keyring\"}"
		exit 1
	fi

	if [ $(ismounted) -eq 1 ] ; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	# Ensure only root can read the keyring file
	current_umask=$(umask)
	umask 077
	# Write keyring to file
	KEYRING_PATH="/var/run/cephfs/${AUTH_ID}/ceph.client.${AUTH_ID}.keyring"
	mkdir -p "/var/run/cephfs/${AUTH_ID}"
	echo $KEYRING  > $KEYRING_PATH
	umask $current_umask

	# Mount the share with ceph-fuse
	mkdir -p ${MNTPATH} &> /dev/null
	# Expect the conf file to be written in /etc/ceph/ceph.conf	which is where the
	# ceph puppet module installs the file.
	TMPDIR=$(mktemp -d)

	mount -t ceph  ${MONITOR}:/ ${TMPDIR} -o mds_namespace=${MDS},name=${AUTH_ID},secretfile=${KEYRING_PATH}
    if [ $? -ne 0 ]; then
       err "{ \"status\": \"Failure\", \"message\": \"Failed to mount CephFS share $MONITOR:${SHARE} at ${MNTPATH}\"}"
       exit 1
    fi

	mkdir -p ${TMPDIR}${SHARE}
	if [ $? -ne 0 ]; then
	   err "{ \"status\": \"Failure\", \"message\": \"Failed to mount CephFS share $MONITOR:${SHARE} at ${MNTPATH}\"}"
	   exit 1
	fi
    umount ${TMPDIR} && rm -rf ${TMPDIR}
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed to mount CephFS share $MONITOR:${SHARE} at ${MNTPATH}\"}"
        exit 1
    fi

	debug "mount command:"
	debug "mount -t ceph  $MONITOR:$SHARE ${MNTPATH} -o mds_namespace=${MDS},name=${AUTH_ID},secretfile=${KEYRING_PATH}" 
	output=$(mount -t ceph  $MONITOR:$SHARE ${MNTPATH} -o mds_namespace=${MDS},name=${AUTH_ID},secretfile=${KEYRING_PATH} 2>&1)

	if [ $? -ne 0 ]; then
		err "{ \"status\": \"Failure\", \"message\": \"Failed to mount CephFS share $MONITOR:${SHARE} at ${MNTPATH}: ${output}\"}"
		exit 1
	fi
	log "{\"status\": \"Success\"}"
	exit 0
}

unmount() {
    debug "unmount"
    debug "$1"
	MNTPATH=$1
	if [ $(ismounted) -eq 0 ] ; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	sync && umount ${MNTPATH} &> /dev/null
	if [ $? -ne 0 ]; then
		err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${MNTPATH}\"}"
		exit 1
	fi

	log "{\"status\": \"Success\"}"
	exit 0
}

# provisions a volume
provision(){
    debug "provision() called"
    log "{\"status\": \"Success\"}"
    exit 0
}

# deletes a provisioned volume
delete(){
    debug "delete() called"
    debug $1
#	MDS=$(echo $1 | jq -r '.mds')
#	MONITOR=$(echo $1 | jq -r '.monitors')
#    SHARE=$(echo $1 | jq -r '.share')
#	if [[ "$SHARE" == "null" ]]
#	then
#		SHARE=/$(echo $1 | jq -r '.["kubernetes.io/pvOrVolumeName"]')
#	fi
#
#	AUTH_ID=$(echo $1 | jq -r '.authid')
#	KEYRING=$(echo $1 | jq -r '.["kubernetes.io/secret/keyring"]')
#
#	# If value of keyring  is null it means secret not present. Try to parse it
#	# from an option instead of a secret
#	if [[ ${KEYRING} == 'null' ]]; then
#		KEYRING=$(echo $1 | jq -r '.keyring')
#	fi
#
#	# If keyring is still null, it means there is no keyring. Abort
#	if [[ ${KEYRING} == 'null' ]]; then
#		err "{ \"status\": \"Failure\", \"message\": \"Failed to mount CephFS share ${SHARE} at ${MNTPATH} due to no keyring\"}"
#		exit 1
#	fi
#
#	# Ensure only root can read the keyring file
#	current_umask=$(umask)
#	umask 077
#	# Write keyring to file
#	KEYRING_PATH="/var/run/cephfs/${AUTH_ID}/ceph.client.${AUTH_ID}.keyring"
#	mkdir -p "/var/run/cephfs/${AUTH_ID}"
#	echo $KEYRING  > $KEYRING_PATH
#	umask $current_umask
#
#		mount -t ceph  ${MONITOR}:/ ${TMPDIR} -o mds_namespace=${MDS},name=${AUTH_ID},secretfile=${KEYRING_PATH}
#    if [ $? -ne 0 ]; then
#       err "{ \"status\": \"Failure\", \"message\": \"Failed to mount CephFS share $MONITOR:${SHARE} at ${MNTPATH}\"}"
#       exit 1
#    fi
#
#	rm -rf ${TMPDIR}${SHARE}
#	if [ $? -ne 0 ]; then
#	   err "{ \"status\": \"Failure\", \"message\": \"Failed to mount CephFS share $MONITOR:${SHARE} at ${MNTPATH}\"}"
#	   exit 1
#	fi
#    umount ${TMPDIR} && rm -rf ${TMPDIR}
#    if [ $? -ne 0 ]; then
#        err "{ \"status\": \"Failure\", \"message\": \"Failed to mount CephFS share $MONITOR:${SHARE} at ${MNTPATH}\"}"
#        exit 1
#    fi

    log "{\"status\": \"Success\"}"
    exit 0
}

op=$1

if [ "$op" = "init" ]; then
    debug "init"
    # SELinux relabel not supported on a FUSE mount point
	log "{\"status\": \"Success\", \"capabilities\": {\"attach\": false, \"selinuxRelabel\": false}}"
	exit 0
fi

if [ $# -lt 2 ]; then
	usage
fi

shift

case "$op" in
	mount)
		domount $*
		;;
	unmount)
		unmount $*
		;;
	*)
		log "{ \"status\": \"Not supported\" }"
		exit 0
esac

exit 1
